# Memoization 
class Solution {
    public int findFib(int i , int[] dp)
    {
        if(i <= 1)
        return dp[i] = i;
        else if(dp[i] != -1)
        return dp[i];
        return dp[i] = findFib(i - 1 , dp) + findFib(i - 2 , dp);
    }
    public int fib(int n) {
        int dp[] = new int[n + 1];
        Arrays.fill(dp , -1);
        return findFib(n , dp);
        
    }
}
// TC : O(N)
// SC : N [DP Array] + N [Recursive Stack Space] => O(2N)
# Tabulation 
class Solution {
    // Tabulation [Bottom - up](Base Case -> Required ans)
    public int fib(int n) {
        if(n <= 1)
        return n;
        int dp[] = new int[n + 1];
        dp[0] = 0;
        dp[1] = 1;
        for(int i = 2 ; i <= n ; i++)
        dp[i] = dp[i - 1] + dp[i - 2];

        return dp[n];
        
    }
}
// TC : O(N)
// SC : O(N) [DP Array]

# Space Optimization
class Solution {
    public int fib(int n) {
        if(n <= 1)
        return n;
        int prev = 1 , prev_2 = 0;
        for(int i = 2 ; i <= n ; i++)
        {
            int curr_i = prev + prev_2;
            prev_2 = prev;
            prev = curr_i;
        }
        return prev;
        
    }
}
// TC : O(N)
// SC : O(1)

